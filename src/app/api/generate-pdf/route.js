import { NextResponse } from 'next/server';
import { Document, Page, Text, View, StyleSheet, pdf, Font } from '@react-pdf/renderer';

// Create styles for the PDF
const styles = StyleSheet.create({
  page: {
    flexDirection: 'column',
    backgroundColor: '#ffffff',
    padding: 30,
    fontFamily: 'Helvetica',
  },
  header: {
    marginBottom: 20,
    paddingBottom: 10,
    borderBottomWidth: 2,
    borderBottomColor: '#2563eb',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 5,
  },
  subtitle: {
    fontSize: 14,
    color: '#6b7280',
    marginBottom: 10,
  },
  section: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 10,
    backgroundColor: '#f3f4f6',
    padding: 8,
  },
  text: {
    fontSize: 11,
    lineHeight: 1.4,
    color: '#374151',
    marginBottom: 5,
  },
  boldText: {
    fontSize: 11,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 5,
  },
  listItem: {
    fontSize: 10,
    color: '#4b5563',
    marginBottom: 3,
    marginLeft: 15,
  },
  sceneContainer: {
    marginBottom: 15,
    padding: 10,
    borderWidth: 1,
    borderColor: '#e5e7eb',
    backgroundColor: '#f9fafb',
  },
  sceneTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 8,
  },
  sceneDetail: {
    fontSize: 10,
    color: '#4b5563',
    marginBottom: 3,
  },
  timestamp: {
    fontSize: 10,
    color: '#6b7280',
    fontStyle: 'italic',
    marginBottom: 15,
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 30,
    right: 30,
    textAlign: 'center',
    fontSize: 9,
    color: '#9ca3af',
  },
});

// PDF Document Component
const AnalysisReport = ({ data, url }) => (
  <Document>
    <Page size="A4" style={styles.page}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.title}>Instagram Video Analysis Report</Text>
        <Text style={styles.subtitle}>Generated on {new Date().toLocaleDateString()}</Text>
        <Text style={styles.text}>Video URL: {url}</Text>
        <Text style={styles.text}>Duration: {data.totalDuration}</Text>
      </View>

      {/* Strategic Overview */}
      {data.strategicOverview && (
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>üìä Strategic Overview</Text>
          <Text style={styles.text}>
            {data.strategicOverview.replace(/[#*`]/g, '').substring(0, 800)}
            {data.strategicOverview.length > 800 ? '...' : ''}
          </Text>
        </View>
      )}

      {/* Video Category */}
      {data.videoCategory && (
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>üè∑Ô∏è Video Category</Text>
          <Text style={styles.boldText}>Category: {data.videoCategory.category}</Text>
          <Text style={styles.text}>Confidence: {Math.round(data.videoCategory.confidence * 100)}%</Text>
          <Text style={styles.text}>Reasoning: {data.videoCategory.reasoning}</Text>
        </View>
      )}

      {/* Content Structure */}
      {data.contentStructure && (
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>üìù Content Structure</Text>
          <Text style={styles.text}>{data.contentStructure}</Text>
        </View>
      )}

      {/* Hook Analysis */}
      {data.hook && (
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>üé£ Primary Hook</Text>
          <Text style={styles.text}>{data.hook}</Text>
        </View>
      )}

      {/* Transcript */}
      {data.transcript && data.transcript.text && (
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>üó£Ô∏è Transcript</Text>
          <Text style={styles.text}>{data.transcript.text}</Text>
        </View>
      )}

      <Text style={styles.footer}>
        Generated by Instagram Video Analyzer ‚Ä¢ {new Date().toISOString()}
      </Text>
    </Page>

    {/* Second Page - Scene Analysis */}
    {data.scenes && data.scenes.length > 0 && (
      <Page size="A4" style={styles.page}>
        <View style={styles.header}>
          <Text style={styles.title}>Scene-by-Scene Analysis</Text>
          <Text style={styles.subtitle}>{data.scenes.length} scenes analyzed</Text>
        </View>

        {data.scenes.map((scene, index) => (
          <View key={index} style={styles.sceneContainer}>
            <Text style={styles.sceneTitle}>
              Scene {scene.sceneNumber}: {scene.title}
            </Text>
            <Text style={styles.sceneDetail}>
              Duration: {scene.duration} | Time: {scene.timeRange}
            </Text>
            <Text style={styles.text}>{scene.description}</Text>
            
            {scene.contextualMeaning && (
              <View style={{marginTop: 5}}>
                <Text style={styles.boldText}>Key Insights:</Text>
                <Text style={styles.listItem}>Intent: {scene.contextualMeaning.intent}</Text>
                <Text style={styles.listItem}>Execution: {scene.contextualMeaning.execution}</Text>
                <Text style={styles.listItem}>Impact: {scene.contextualMeaning.impact}</Text>
              </View>
            )}
          </View>
        ))}

        <Text style={styles.footer}>
          Page 2 ‚Ä¢ Generated by Instagram Video Analyzer ‚Ä¢ {new Date().toISOString()}
        </Text>
      </Page>
    )}

    {/* Third Page - Detailed Analysis */}
    {data.contextualAnalysis && (
      <Page size="A4" style={styles.page}>
        <View style={styles.header}>
          <Text style={styles.title}>Contextual Analysis</Text>
          <Text style={styles.subtitle}>Deep dive into content strategy</Text>
        </View>

        {data.contextualAnalysis.creatorIntent && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üéØ Creator Intent</Text>
            <Text style={styles.boldText}>Primary Intent: {data.contextualAnalysis.creatorIntent.primaryIntent}</Text>
            <Text style={styles.text}>How Achieved: {data.contextualAnalysis.creatorIntent.howAchieved}</Text>
            {data.contextualAnalysis.creatorIntent.effectivenessFactors && (
              <View>
                <Text style={styles.boldText}>Effectiveness Factors:</Text>
                {data.contextualAnalysis.creatorIntent.effectivenessFactors.map((factor, i) => (
                  <Text key={i} style={styles.listItem}>‚Ä¢ {factor}</Text>
                ))}
              </View>
            )}
          </View>
        )}

        {data.contextualAnalysis.humorMechanics && data.contextualAnalysis.humorMechanics.isHumorous && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üòÑ Humor Analysis</Text>
            <Text style={styles.boldText}>Humor Type: {data.contextualAnalysis.humorMechanics.humorType}</Text>
            <Text style={styles.text}>Setup & Payoff: {data.contextualAnalysis.humorMechanics.setupAndPayoff}</Text>
            {data.contextualAnalysis.humorMechanics.specificTechniques && (
              <View>
                <Text style={styles.boldText}>Techniques Used:</Text>
                {data.contextualAnalysis.humorMechanics.specificTechniques.map((technique, i) => (
                  <Text key={i} style={styles.listItem}>‚Ä¢ {technique}</Text>
                ))}
              </View>
            )}
          </View>
        )}

        {data.contextualAnalysis.messageDelivery && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üì¢ Message Delivery</Text>
            <Text style={styles.boldText}>Core Message: {data.contextualAnalysis.messageDelivery.coreMessage}</Text>
            <Text style={styles.text}>Delivery Method: {data.contextualAnalysis.messageDelivery.deliveryMethod}</Text>
            {data.contextualAnalysis.messageDelivery.memorabilityFactors && (
              <View>
                <Text style={styles.boldText}>Memorability Factors:</Text>
                {data.contextualAnalysis.messageDelivery.memorabilityFactors.map((factor, i) => (
                  <Text key={i} style={styles.listItem}>‚Ä¢ {factor}</Text>
                ))}
              </View>
            )}
          </View>
        )}

        {data.hooks && data.hooks.length > 0 && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üé£ Attention Hooks ({data.hooks.length})</Text>
            {data.hooks.slice(0, 5).map((hook, i) => (
              <View key={i} style={{marginBottom: 5}}>
                <Text style={styles.listItem}>
                  {hook.timestamp}: {hook.description} ({hook.impact} impact)
                </Text>
              </View>
            ))}
          </View>
        )}

        <Text style={styles.footer}>
          Page 3 ‚Ä¢ Generated by Instagram Video Analyzer ‚Ä¢ {new Date().toISOString()}
        </Text>
      </Page>
    )}
  </Document>
);

export async function POST(request) {
  try {
    const { analysisData, videoUrl } = await request.json();

    if (!analysisData) {
      return NextResponse.json(
        { error: 'Analysis data is required' },
        { status: 400 }
      );
    }

    // Generate the PDF
    const doc = <AnalysisReport data={analysisData} url={videoUrl || 'Unknown'} />;
    const pdfBuffer = await pdf(doc).toBuffer();

    // Return the PDF as a downloadable file
    return new NextResponse(pdfBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="instagram-analysis-${Date.now()}.pdf"`,
        'Content-Length': pdfBuffer.length.toString(),
      },
    });

  } catch (error) {
    console.error('Error generating PDF:', error);
    return NextResponse.json(
      { error: 'Failed to generate PDF report' },
      { status: 500 }
    );
  }
} 